# SUBLIST SEARCH ALGORITHM

'''
Mainy Worls with Link List.

Real time Application :
	- Spell Checker
	- Search engine etc.
	
How it works ?
	-  Compare data and search(Pattern).
	-  If pattern and data both same then go ahead.
	-  Otherwise data still continue from current index
	-  But patter index set to base again.
	
	Undertand with Example :
		
		data   : AABBBBBBBBB
		patter : AB
		
		Step 1: Compare Data[0] and pattern[0] Same. So increment.
		
		Step 2: Compare Data[1] and pattern[1] Not same. 
				// Now Pattern Set to index 0 again.
				
		Step 3: Data[1] and pattern[0] Same.
		Step 4: Data[2] and pattern[1] Same.
		Step 5: FOUND EXIT.
					
'''

#pattern = Search

'''
Node for simple link node.
- Where datavalue contain value at the time of constructer Calling.
- next contains address of next node.

'''
class Node:
	def __init__(self,datavalue=None):
		self.datavalue = datavalue
		self.next = None
		
'''
Actual logic of sublist search algorithm 
'''	
def sublist_pattern_search(data,pattern):
	i = data
	j = pattern
	
	while i is not None:
		if i.datavalue == j.datavalue:
			print(f"\n{ i.datavalue } == { j.datavalue }")
			
			if i.next is None and j.next is None:
				if i.datavalue==j.datavalue:
					return True
					break;
				else:
					return False;
					break;
					
			if i.next is None:
				#print("\nData Finished.")
				return False;
				break;
			else:
				i = i.next
			
			if j.next is None:
				#print("\nPattern Finished.")
				return True;
			else:
				j = j.next
		else:
			i = i.next
			j = pattern
			
	
if __name__ == "__main__":
	
	print("\n--------------LINK LIST------------------")
	node_1 = Node(1)
	node_2 = Node(2)
	node_3 = Node(3)
	node_4 = Node(4)
	
	node_1.next = node_2
	node_2.next = node_3
	node_3.next = node_4
	node_4.next = None
	
	i = node_1
	while i is not None:
		print(f"{i.datavalue} -> ",end=" ")
		i = i.next
		
	print("\n\n--------------SEARCHING FOR------------- ")	
	node_a = Node(4)
	node_b = Node(5)
	
	node_a.next = node_b
	node_b.next = None
	
	j = node_a
	while j is not None:
		print(f"{ j.datavalue }-> ",end=" ")
		j = j.next
		
	
	
	print("\n--------------RESULT------------------")
	if sublist_pattern_search(node_1,node_a):
		print("FOUND")
	else:
		print("NOT FOUND")
		
	
	
#Generated By Niteshkumar Prajapati.	